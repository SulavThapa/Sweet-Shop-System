
import java.awt.Color;
import java.io.IOException;
import static java.lang.String.valueOf;
import java.util.Arrays;
import static java.util.Collections.swap;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * 
 */
public class CourseWork1 extends javax.swing.JFrame {

    /*
     * Creates new form NAYADESIGN
     */
    String[] itmID = {"MI1", "LM1", "SA1", "MI2", "PL1", "LA1", "LM2", "SA2", "MI3", "PL2", "LA1", "LM3"}; //initializing itmID
    String[] itemName = {"Barfi", "Aitha", "Nimkee", "Rasbari", "Panjafi/Khaja", "Buniya Ladoo", "Mathha", "Nimkee Tukra", "Lalmon", "Fini", "Masala Ladoo", "Jopasa"}; //initializing item name in an array
    String[] category = {"Milk Product", "Lakhamari", "Salty", "Milk Product", "Plain", "Ladoo", "Lakhamari", "Salty", "Milk Product", "Plain", "Ladoo", "Lakhamari"}; //initializing item category in array
    String[] size = {"Regular", "Large", "Regular", "Regular", "Regular", "Regular", "Large", "Regular", "Regular", "Regular", "Regular", "Large"};
    int[] priceP = {30, 100, 25, 30, 20, 15, 150, 0, 30, 25, 15, 160};//using array to initialize price by piece
    int[] priceK = {900, 550, 530, 800, 400, 600, 650, 450, 800, 530, 600, 750}; //using array to initialize price by kg
    LinkedList store = new LinkedList();
    LinkedList storeSort = new LinkedList();

    public String[] getdata = new String[6];

    public CourseWork1() {
        initComponents();
        tableAdd();
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel3 = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();
        namePanel = new javax.swing.JPanel();
        mainName = new javax.swing.JLabel();
        homePanel = new javax.swing.JPanel();
        topPanel = new javax.swing.JPanel();
        addDetails = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        menuLabel = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        menuTable = new javax.swing.JTable();
        stopWatch = new javax.swing.JLabel();
        sortLabel = new javax.swing.JLabel();
        sortButton = new javax.swing.JButton();
        searchLabel = new javax.swing.JLabel();
        sortPrice = new javax.swing.JComboBox();
        searchCategory = new javax.swing.JComboBox();
        categorySearchButton = new javax.swing.JButton();
        priceSearchButton = new javax.swing.JButton();
        searchPriceText = new javax.swing.JTextField();
        home = new javax.swing.JButton();
        userGuide = new javax.swing.JButton();
        about = new javax.swing.JButton();
        menuLine = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        open = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exit = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        aboutmenu = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        userguideug = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sweet Shop");
        setBackground(new java.awt.Color(0, 204, 204));
        setForeground(java.awt.Color.white);
        setResizable(false);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        mainPanel.setBackground(new java.awt.Color(0, 153, 153));
        mainPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        namePanel.setBackground(new java.awt.Color(0, 102, 102));
        namePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        mainName.setFont(new java.awt.Font("Raleway", 0, 26)); // NOI18N
        mainName.setForeground(new java.awt.Color(255, 255, 255));
        mainName.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cookies.png"))); // NOI18N
        mainName.setText("Suyu Sweets");

        javax.swing.GroupLayout namePanelLayout = new javax.swing.GroupLayout(namePanel);
        namePanel.setLayout(namePanelLayout);
        namePanelLayout.setHorizontalGroup(
            namePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(namePanelLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(mainName)
                .addContainerGap(44, Short.MAX_VALUE))
        );
        namePanelLayout.setVerticalGroup(
            namePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(namePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainName, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        homePanel.setBackground(new java.awt.Color(216, 214, 214));

        topPanel.setBackground(new java.awt.Color(0, 255, 204));
        topPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        addDetails.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        addDetails.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add-button.png"))); // NOI18N
        addDetails.setText(" ADD DETAILS");
        addDetails.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        addDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDetailsActionPerformed(evt);
            }
        });

        delete.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete.png"))); // NOI18N
        delete.setText("Delete");
        delete.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 717, Short.MAX_VALUE)
                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addDetails, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addGap(26, 26, 26))
        );

        menuLabel.setFont(new java.awt.Font("Raleway", 0, 22)); // NOI18N
        menuLabel.setText("Menu Details");

        menuTable.setFont(new java.awt.Font("Raleway", 0, 18)); // NOI18N
        menuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Item ID", "Item Name", "Category", "Size", "Price(Piece)", "Price(Kg)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        menuTable.setRowHeight(25);
        jScrollPane1.setViewportView(menuTable);
        if (menuTable.getColumnModel().getColumnCount() > 0) {
            menuTable.getColumnModel().getColumn(0).setResizable(false);
            menuTable.getColumnModel().getColumn(1).setResizable(false);
            menuTable.getColumnModel().getColumn(2).setResizable(false);
            menuTable.getColumnModel().getColumn(3).setResizable(false);
            menuTable.getColumnModel().getColumn(4).setResizable(false);
            menuTable.getColumnModel().getColumn(5).setResizable(false);
        }

        stopWatch.setBackground(new java.awt.Color(153, 153, 153));
        stopWatch.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N

        sortLabel.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        sortLabel.setText("Sort By:");

        sortButton.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        sortButton.setText("Sort");
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });

        searchLabel.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        searchLabel.setText("Search By:");

        sortPrice.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        sortPrice.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Price (Low to High)", "Price (High to Low))" }));
        sortPrice.setPreferredSize(new java.awt.Dimension(141, 42));

        searchCategory.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        searchCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select a category", "Milk Product", "Salty", "Ladoo", "Lakhamari", "Plain" }));
        searchCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCategoryActionPerformed(evt);
            }
        });

        categorySearchButton.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        categorySearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/magnifier.png"))); // NOI18N
        categorySearchButton.setText("Search");
        categorySearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categorySearchButtonActionPerformed(evt);
            }
        });

        priceSearchButton.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        priceSearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/magnifier.png"))); // NOI18N
        priceSearchButton.setText("Search");
        priceSearchButton.setPreferredSize(new java.awt.Dimension(71, 42));
        priceSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceSearchButtonActionPerformed(evt);
            }
        });

        searchPriceText.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(menuLabel)
                            .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(homePanelLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 970, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(stopWatch, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(homePanelLayout.createSequentialGroup()
                                .addComponent(searchLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchPriceText, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(priceSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(categorySearchButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sortLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sortPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sortButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(menuLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(categorySearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchLabel)
                        .addComponent(searchCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchPriceText, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(priceSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sortLabel)
                        .addComponent(sortPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sortButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(stopWatch, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        home.setBackground(new java.awt.Color(114, 0, 153));
        home.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        home.setForeground(new java.awt.Color(255, 255, 255));
        home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/home.png"))); // NOI18N
        home.setText("Home");
        home.setContentAreaFilled(false);
        home.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                homeMouseMoved(evt);
            }
        });
        home.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                homeMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                homeMousePressed(evt);
            }
        });
        home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeActionPerformed(evt);
            }
        });

        userGuide.setBackground(new java.awt.Color(114, 0, 153));
        userGuide.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        userGuide.setForeground(new java.awt.Color(255, 255, 255));
        userGuide.setIcon(new javax.swing.ImageIcon(getClass().getResource("/books.png"))); // NOI18N
        userGuide.setText("User Guide");
        userGuide.setContentAreaFilled(false);
        userGuide.setPreferredSize(new java.awt.Dimension(123, 48));
        userGuide.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                userGuideMouseMoved(evt);
            }
        });
        userGuide.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                userGuideMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                userGuideMousePressed(evt);
            }
        });
        userGuide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userGuideActionPerformed(evt);
            }
        });

        about.setBackground(new java.awt.Color(114, 0, 153));
        about.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        about.setForeground(new java.awt.Color(255, 255, 255));
        about.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hand-gesture.png"))); // NOI18N
        about.setText("About");
        about.setBorderPainted(false);
        about.setContentAreaFilled(false);
        about.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                aboutMouseMoved(evt);
            }
        });
        about.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                aboutMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                aboutMousePressed(evt);
            }
        });
        about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(namePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(home, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userGuide, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(about, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(homePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 991, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(namePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(home, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userGuide, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(about, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(homePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(1329, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        menuLine.setBackground(new java.awt.Color(0, 0, 0));

        jMenu1.setText("File");

        open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        open.setIcon(new javax.swing.ImageIcon(getClass().getResource("/envelope.png"))); // NOI18N
        open.setText("Open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        jMenu1.add(open);
        jMenu1.add(jSeparator1);

        exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/exit.png"))); // NOI18N
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        jMenu1.add(exit);

        menuLine.add(jMenu1);

        jMenu3.setText("Help");

        aboutmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        aboutmenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/about-successful-man.png"))); // NOI18N
        aboutmenu.setText("About ");
        aboutmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutmenuActionPerformed(evt);
            }
        });
        jMenu3.add(aboutmenu);
        jMenu3.add(jSeparator4);
        jMenu3.add(jSeparator3);

        userguideug.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        userguideug.setIcon(new javax.swing.ImageIcon(getClass().getResource("/user-guide-book.png"))); // NOI18N
        userguideug.setText("User Guide");
        userguideug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userguideugActionPerformed(evt);
            }
        });
        jMenu3.add(userguideug);

        menuLine.add(jMenu3);

        setJMenuBar(menuLine);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setBounds(0, 0, 1297, 693);
    }// </editor-fold>//GEN-END:initComponents

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        // TODO add your handling code here:
        String cmds[] = new String[]{"cmd", "/c", "C:\\Users\\User\\Desktop\\2018 - 19 A CS5004NA CW Group Work 17030948 Summit Shakya\\2018 - 19 A CS5004NA CW Group Work 17030948 Summit Shakya.pdf"};
        try {
            Runtime.getRuntime().exec(cmds);
        } catch (IOException ex) {
            Logger.getLogger(CourseWork1.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_openActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:

        DefaultTableModel model = (DefaultTableModel) menuTable.getModel();

        if (menuTable.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(rootPane, "Select a row to delete");
        } else {
            int selectedOption = JOptionPane.showConfirmDialog(rootPane, "Do you want to delete selected row?", "Choose", JOptionPane.YES_NO_OPTION);
            if (selectedOption == JOptionPane.YES_OPTION) {
                model.removeRow(menuTable.getSelectedRow());
            }
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void userGuideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userGuideActionPerformed
        // TODO add your handling code here:
        new UserGuide().setVisible(true);


    }//GEN-LAST:event_userGuideActionPerformed

    private void addDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDetailsActionPerformed
        // TODO add your handling code here:
        InputForm in = new InputForm(this);
        in.setVisible(true);
    }//GEN-LAST:event_addDetailsActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:

        int selectedOption = JOptionPane.showConfirmDialog(rootPane, "Do you want to close?", "Choose", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION) {
            System.exit(0);
        }

    }//GEN-LAST:event_exitActionPerformed

    private void aboutMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutMouseMoved
        // TODO add your handling code here:
        about.setForeground(new Color(0, 0, 0));
    }//GEN-LAST:event_aboutMouseMoved

    private void aboutMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutMouseExited
        // TODO add your handling code here:
        about.setForeground(new Color(255, 255, 255));
    }//GEN-LAST:event_aboutMouseExited

    private void homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeActionPerformed
        // TODO add your handling code here:
        homePanel.setVisible(true);
    }//GEN-LAST:event_homeActionPerformed

    private void userGuideMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userGuideMouseMoved
        // TODO add your handling code here:
        userGuide.setForeground(new Color(0, 0, 0));
    }//GEN-LAST:event_userGuideMouseMoved

    private void userGuideMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userGuideMouseExited
        // TODO add your handling code here:
        userGuide.setForeground(new Color(255, 255, 255));
    }//GEN-LAST:event_userGuideMouseExited

    private void homeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeMouseExited
        // TODO add your handling code here:
        home.setForeground(new Color(255, 255, 255));
    }//GEN-LAST:event_homeMouseExited

    private void homeMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeMouseMoved
        // TODO add your handling code here:
        home.setForeground(new Color(0, 0, 0));
    }//GEN-LAST:event_homeMouseMoved

    private void homeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeMousePressed
        // TODO add your handling code here:
        home.setForeground(new Color(0, 0, 255));
    }//GEN-LAST:event_homeMousePressed

    private void userGuideMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userGuideMousePressed
        // TODO add your handling code here:
        userGuide.setForeground(new Color(0, 0, 255));
    }//GEN-LAST:event_userGuideMousePressed

    private void aboutMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutMousePressed
        // TODO add your handling code here:
        about.setForeground(new Color(0, 0, 255));

    }//GEN-LAST:event_aboutMousePressed

    private void aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutActionPerformed
        // TODO add your handling code here:
        new About().setVisible(true);
    }//GEN-LAST:event_aboutActionPerformed

    private void aboutmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutmenuActionPerformed
        // TODO add your handling code here:
        String cmds[] = new String[]{"cmd", "/c", "C:\\Users\\User\\Desktop\\Suyu Sweet Guide.pdf"};
        try {
            Runtime.getRuntime().exec(cmds);
        } catch (IOException ex) {
            Logger.getLogger(CourseWork1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_aboutmenuActionPerformed

    private void userguideugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userguideugActionPerformed
        // TODO add your handling code here:
        String cmds[] = new String[]{"cmd", "/c", "C:\\Users\\User\\Desktop\\2018 - 19 A CS5004NA CW Group Work 17030948 Summit Shakya\\2018 - 19 A CS5004NA CW Group Work 17030948 Summit Shakya.pdf"};
        try {
            Runtime.getRuntime().exec(cmds);
        } catch (IOException ex) {
            Logger.getLogger(CourseWork1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_userguideugActionPerformed

    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
        // TODO add your handling code here:
//        store.clear();
//        if(sortChoose.isSelected())
//        {
//            int row = menuTable.getRowCount();//To get the no. of rows of table
//            for (int i = 0; i < row; i++) // To add all the value of table to LinkedList
//            {
//                String id = (String)menuTable.getValueAt(i, 0);
//                String name = (String) menuTable.getValueAt(i, 1);
//                String category1 = (String) menuTable.getValueAt(i, 2);
//                String size1  = (String) menuTable.getValueAt(i, 3);
//                String pricepc = valueOf(menuTable.getValueAt(i, 4));
//                String pricekg = valueOf(menuTable.getValueAt(i, 5));
//                store.add(id);
//                store.add(name);
//                store.add(category1);
//                store.add(size1);
//                store.add(pricepc);
//                store.add(pricekg);
//            }
//            
//            sorter(store, store.size());
//            
//            DefaultTableModel model = (DefaultTableModel) menuTable.getModel();
//            model.setRowCount(0);
//            for (int j = 0; j < store.size(); j = j + 6) 
//            {
//                model.addRow(new Object[]{store.get(0 + j), store.get(1 + j), store.get(2 + j), store.get(3 + j), store.get(4 + j), store.get(5 + j)});
//            }
//        }
        
//        MergeSorter.sort(priceP);
//        
//        for (int i = 0; i < 12; i++) 
//        {
//            menuTable.setValueAt(itmID[i], i, 0);
//            menuTable.setValueAt(itemName[i], i, 1);
//            menuTable.setValueAt(category[i], i, 2);
//            menuTable.setValueAt(size[i], i, 3);
//            menuTable.setValueAt(priceP[i], i, 4);
//            menuTable.setValueAt(priceK[i], i, 5);
//        }
        
        String sortType=(String) sortPrice.getSelectedItem();
        int row=menuTable.getRowCount();
        int column=menuTable.getColumnCount();
        String itemList [][]=new String[row][column];
        
        for(int i=0;i<row;i++)
        {
            for(int j=0; j<column; j++)
            {
                itemList[i][j]=(String) menuTable.getValueAt(i,j);
            }
        }
        
        
        
    }//GEN-LAST:event_sortButtonActionPerformed

    private void categorySearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categorySearchButtonActionPerformed
        String catSearch = (String)(searchCategory.getSelectedItem());
        int categoryCount = 0;
        String itemsFound = "";
        if (catSearch.equals("Select a category")) 
        {
            JOptionPane.showMessageDialog(rootPane, "Please choose a category.");

        } 
        else 
        {
            
            DefaultTableModel model = (DefaultTableModel) menuTable.getModel();
            int row = model.getRowCount();
            for (int i = 0; i < row; i++) 
            {
                String temp = (String)(menuTable.getValueAt(i, 2));
                if (temp.equals(catSearch)) {
                    categoryCount++;
                    itemsFound = itemsFound + "\n" + ((menuTable.getValueAt(i, 1)) );
                }
            }
            if (categoryCount == 0) 
            {
                JOptionPane.showMessageDialog(rootPane, "No items found in this category");
            }
            else 
            {
                JOptionPane.showMessageDialog(rootPane,"There are " + categoryCount + " items in this category." + "\nItems are: " + itemsFound);
            }
        }
        
    }//GEN-LAST:event_categorySearchButtonActionPerformed

    private void priceSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceSearchButtonActionPerformed
        // TODO add your handling code here:    
        MergeSorter.sort(priceP);
        int start=0;
        int end=priceP.length-1;
        if(searchPriceText.getText().equals(""))
        {
            JOptionPane.showMessageDialog(rootPane, "Please enter a price to search");
        }
        else
        {
            
            
            int input=Integer.parseInt(searchPriceText.getText());
            
            int result=searchInputPrice(priceP, start, end, input);
            
            if(result==-1)
            {
                JOptionPane.showMessageDialog(rootPane,"Sorry, the entered price is not available.");
            }
            else
            {
                for(int i =0; i<menuTable.getRowCount();i++)
                {
                    int price = (Integer) menuTable.getValueAt(i,4);
                    
                    if(price==result)
                    {
                        String IDitem=(String)menuTable.getValueAt(i,0);
                        String nameItem=(String)menuTable.getValueAt(i,1);
                        String categoryItem=(String)menuTable.getValueAt(i,2);
                        String sizeItem=(String)menuTable.getValueAt(i,3);
                        int pricePieceItem=(Integer) menuTable.getValueAt(i,4);
                        int priceKgItem=(Integer) menuTable.getValueAt(i,5);
                        
                        JOptionPane.showMessageDialog(rootPane, "Item ID: " + IDitem + "\n" + "Item Name: " + nameItem + "\n" + "Category: " + categoryItem + "\n" + "Size: " + sizeItem + "\n" + "Price(Piece): " + pricePieceItem + "\n" + "Price(Kg): " + priceKgItem);
                        return;
                    }
                }
            }
            
        }
        searchPriceText.setText("");
        
    
        
        
        
        
    }//GEN-LAST:event_priceSearchButtonActionPerformed
public static int searchInputPrice(int array[], int begin, int end,  int search)
{

    if (begin <= end) 
    {
            int middleValue = (begin+end) / 2;
            int requiredValue = array[middleValue];
            if (requiredValue == search) 
            {
                return requiredValue;
            } 
            else if (requiredValue < search) 
            {
                return searchInputPrice(array, middleValue - 1, end, search);
            } 
            else 
            {
                return searchInputPrice(array, middleValue+1, end, search);
            }
    }
    return -1;
}
    private void searchCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchCategoryActionPerformed
    public void sorter(LinkedList store, int sizeOfArray)
    {
        for(int i = 5; i < sizeOfArray - 1; i = (i + 6)) //*******************************************************************************************************************
        {
            //To store values and send it for comparison
            int minimum= position(store, i);
            swap(store, minimum, i);
        }
    }
    
    public int position(LinkedList store, int pos)
    {
        int minimum = pos;
        for (int i = pos + 6; i < store.size(); i = (i + 6)) 
        {
            int index = Integer.parseInt(store.get(i).toString());
            int intPos = Integer.parseInt(store.get(minimum).toString());
            
            if (index < intPos) 
            {
                minimum = i;
            }
            
        }
        return minimum;
    }
    
    public void swap(LinkedList store, int minimum, int index)
    {
        String tempPrice = (store.get(index).toString());
        store.set(index,store.get(minimum));
        store.set(minimum, tempPrice);

        String tempSize = (store.get(index - 1).toString());
        store.set(index - 1, store.get(minimum - 1));
        store.set(minimum - 1, tempSize);

        String tempCategory = (store.get(index - 2).toString());
        store.set(index - 2, store.get(minimum - 2));
        store.set(minimum - 2, tempCategory);

        String tempBName = (store.get(index - 3).toString());
        store.set(index - 3, store.get(minimum - 3));
        store.set(minimum - 3, tempBName);

        String tempSNum = (store.get(index - 4).toString());
        store.set(index - 4, store.get(minimum - 4));
        store.set(minimum - 4, tempSNum);
        
        String tempSNums = (store.get(index + 0).toString());
        store.set(index + 0, store.get(minimum + 0));
        store.set(minimum + 0, tempSNums);
    }
    
    public void postData() 
    {
        
        Object[] row = {getdata[0], getdata[1], getdata[2], getdata[3], getdata[4], getdata[5]}; //new array created

        DefaultTableModel model = (DefaultTableModel) menuTable.getModel();//default table model class

        model.addRow(row); //adds new row from inputform class

    }

    public void tableAdd() {
        
        int RCount = menuTable.getRowCount(); //storing number of row counted
        int CCount = menuTable.getColumnCount(); //storing number of column counted
        int nextRow = 0;

        if (RCount != 0)// condition for row is not 0
        {
            do {
                nextRow++;
            } while (nextRow < RCount);
        }

        DefaultTableModel mdl = (DefaultTableModel) menuTable.getModel(); //default table model class 

        for (int i = 0; i < 12; i++)//for loop used for storing the value into the table repeatedly
        {
            menuTable.setValueAt(itmID[i], i, 0); //sets the value to the table
            menuTable.setValueAt(itemName[i], i, 1); //sets the value to the table
            menuTable.setValueAt(category[i], i, 2); //sets the value to the table
            menuTable.setValueAt(size[i], i, 3); //sets the value to the table
            menuTable.setValueAt(priceP[i], i, 4); //sets the value to the table
            menuTable.setValueAt(priceK[i], i, 5); //sets the value to the table
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CourseWork.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CourseWork.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CourseWork.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CourseWork.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CourseWork1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton about;
    private javax.swing.JMenuItem aboutmenu;
    private javax.swing.JButton addDetails;
    private javax.swing.JButton categorySearchButton;
    private javax.swing.JButton delete;
    private javax.swing.JMenuItem exit;
    private javax.swing.JButton home;
    private javax.swing.JPanel homePanel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JLabel mainName;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel menuLabel;
    private javax.swing.JMenuBar menuLine;
    private javax.swing.JTable menuTable;
    private javax.swing.JPanel namePanel;
    private javax.swing.JMenuItem open;
    private javax.swing.JButton priceSearchButton;
    private javax.swing.JComboBox searchCategory;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JTextField searchPriceText;
    private javax.swing.JButton sortButton;
    private javax.swing.JLabel sortLabel;
    private javax.swing.JComboBox sortPrice;
    private javax.swing.JLabel stopWatch;
    private javax.swing.JPanel topPanel;
    private javax.swing.JButton userGuide;
    private javax.swing.JMenuItem userguideug;
    // End of variables declaration//GEN-END:variables
}
